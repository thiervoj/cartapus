function t(){}t.prototype={on:function(t,e,s){var r=this.e||(this.e={});return(r[t]||(r[t]=[])).push({fn:e,ctx:s}),this},once:function(t,e,s){var r=this;function o(){r.off(t,o),e.apply(s,arguments)}return o._=e,this.on(t,o,s)},emit:function(t){for(var e=[].slice.call(arguments,1),s=((this.e||(this.e={}))[t]||[]).slice(),r=0,o=s.length;r<o;r++)s[r].fn.apply(s[r].ctx,e);return this},off:function(t,e){var s=this.e||(this.e={}),r=s[t],o=[];if(r&&e)for(var i=0,n=r.length;i<n;i++)r[i].fn!==e&&r[i].fn._!==e&&o.push(r[i]);return o.length?s[t]=o:delete s[t],this}};var e=t;e.TinyEmitter=t;class s extends e{constructor(t={}){super(),this.intersect=this.intersect.bind(this),this.options=Object.assign({root:null,rootMargin:"0px",threshold:0,once:!1},t),this.observers=[this.createObserver()],this.getElems(),this.createObservers(),this.observe()}getElems(){const t=this.options.root?this.options.root:document;this.elems=t.querySelectorAll("[data-cartapus]")}createObservers(){for(const t of this.elems)if(t.dataset.cartapusThreshold||t.dataset.cartapusRootMargin){const e=t.dataset.cartapusThreshold?parseFloat(t.dataset.cartapusThreshold):this.options.threshold,s=t.dataset.cartapusRootMargin?t.dataset.cartapusRootMargin:this.options.rootMargin,r=this.observers.find(t=>t.threshold===e&&t.rootMargin===s);r?r.elements.push(t):this.observers.push(this.createObserver({element:t,options:{threshold:e,rootMargin:s}}))}else this.observers[0].elements.push(t)}createObserver({options:t,element:e}={}){const s=Object.assign(this.options,t);return{observer:new IntersectionObserver(this.intersect,s),threshold:s.threshold,rootMargin:s.rootMargin,elements:e?[e]:[]}}intersect(t,e){for(const s of t)s.isIntersecting?(s.target.setAttribute("data-cartapus","visible"),s.target.hasAttribute("data-cartapus-once")&&e.unobserve(s.target)):s.target.setAttribute("data-cartapus","hidden"),this.dispatch(s)}dispatch(t){const e={element:t.target,visible:t.isIntersecting,intersection:t},s=new CustomEvent("cartapusintersect",{detail:e});t.target.dispatchEvent(s),this.emit("intersect",e)}observe(){for(const t of this.observers)for(const e of t.elements)e._cartapus=t,t.observer.observe(e)}unobserve(){for(const t of this.observers)for(const e of t.elements)t.observer.unobserve(e)}destroy(){this.unobserve();for(const t of this.observers)t.elements=[]}reset(){this.destroy(),this.init()}}export{s as default};
//# sourceMappingURL=cartapus.modern.mjs.map
