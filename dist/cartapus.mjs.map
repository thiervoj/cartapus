{"version":3,"file":"cartapus.mjs","sources":["../node_modules/tiny-emitter/index.js","../src/cartapus.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * @file Cartapus core file, dispatches events based on [data-cartapus] elements' visibility in the viewport.\n * @author Jordan Thiervoz <jordanthiervoz@gmail.com>\n */\n\nimport Emitter from 'tiny-emitter'\n\n/**\n * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n *\n * Usually you will only need to instanciate Cartapus once for your whole App.\n *\n * @param {Object} [options] — User options.\n * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n *\n * @extends Emitter\n * @class\n */\nexport default class Cartapus extends Emitter {\n  /**\n   * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n   *\n   * Usually you will only need to instanciate Cartapus once for your whole App.\n   *\n   * @param {Object} [options] — User options.\n   * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n   * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n   * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n   * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n   *\n   * @extends Emitter\n   * @constructor\n   */\n  constructor(options = {}) {\n    super()\n\n    // Bind callback method.\n    this.intersect = this.intersect.bind(this)\n\n    // Set user options based on default options.\n    const defaults = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n      once: false\n    }\n\n    this.options = Object.assign(defaults, options)\n\n    // Creates the main IntersectionObserver used with the default options.\n    this.observers = [this.createObserver()]\n\n    this.getElems()\n    this.createObservers()\n    this.observe()\n  }\n\n  /**\n   * Gets the [data-cartapus] elements from root element.\n   *\n   * @private\n   * @returns {void}\n   */\n  getElems() {\n    const root = this.options.root ? this.options.root : document\n\n    this.elems = root.querySelectorAll('[data-cartapus]')\n  }\n\n  /**\n   * For each [data-cartapus] element, check its inner data-cartapus parameters\n   * Create new IntersectionObservers accordingly if parameters differs from the main observer.\n   *\n   * @private\n   * @returns {void}\n   */\n  createObservers() {\n    for (const el of this.elems) {\n      // If element has a custom cartapus attribute.\n      if (el.dataset.cartapusThreshold || el.dataset.cartapusRootMargin) {\n        const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n        const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n        // If an observer already exists with the same threshold & the same rootMargin, add element to this observer.\n        const found = this.observers.find((observer) => observer.threshold === threshold && observer.rootMargin === rootMargin)\n\n        if (found) found.elements.push(el)\n        else {\n          // If no observer has the same threshold & rootMargin, create a new one with the new options.\n          this.observers.push(this.createObserver({\n            element: el,\n            options: {\n              threshold,\n              rootMargin\n            }\n          }))\n        }\n      } else this.observers[0].elements.push(el)\n    }\n  }\n\n  createObserver({ options, element } = {}) {\n    const opt = Object.assign(this.options, options)\n\n    return {\n      observer: new IntersectionObserver(this.intersect, opt),\n      threshold: opt.threshold,\n      rootMargin: opt.rootMargin,\n      elements: element ? [element] : []\n    }\n  }\n\n  /**\n   * Callback function triggered by the observers.\n   * Sets the data-cartapus attribute accordingly to the visibility of the elements.\n   * Triggers the custom events.\n   *\n   * @param {array.<IntersectionObserverEntry>} entries — An array of entries that intersected with the root.\n   * @param {IntersectionObserver} observer — The observer that triggered the event.\n   *\n   * @private\n   * @returns {void}\n   */\n  intersect(entries, observer) {\n    for (const entry of entries) {\n      // Set data-cartapus attribute value either to \"visible\" or \"hidden\".\n      if (entry.isIntersecting) {\n        entry.target.setAttribute('data-cartapus', 'visible')\n\n        // Stop observing this element if \"once\" options it true.\n        if (entry.target.hasAttribute('data-cartapus-once')) observer.unobserve(entry.target)\n      } else entry.target.setAttribute('data-cartapus', 'hidden')\n\n      this.dispatch(entry)\n    }\n  }\n\n  /**\n   * Triggers the CustomEvent `cartapusintersect` on the entry's target.\n   * Also triggers an `intersect` event on the class instance.\n   *\n   * @param {IntersectionObserverEntry} entry — The entry that intersected.\n   *\n   * @private\n   * @returns {void}\n   */\n  dispatch(entry) {\n    // Create event with details.\n    const detail = {\n      element: entry.target,\n      visible: entry.isIntersecting,\n      intersection: entry\n    }\n    const event = new CustomEvent('cartapusintersect', { detail })\n\n    // Dispatch element and instance events.\n    entry.target.dispatchEvent(event)\n    this.emit('intersect', detail)\n  }\n\n  /**\n   * Turns on all the observers to watch all of their related targets.\n   *\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  observe() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        el._cartapus = observer\n\n        observer.observer.observe(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off all the observers to stop watching all of their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  unobserve() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.unobserve(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off observers and empty their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  destroy() {\n    this.unobserve()\n\n    for (const observer of this.observers) {\n      observer.elements = []\n    }\n  }\n\n  /**\n   * Resets everything.\n   * Turns off observers and resets their targets.\n   * Then calls `this.init()` to restart everything with new elements to observe.\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  reset() {\n    this.destroy()\n    this.init()\n  }\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","Cartapus","_Emitter","options","_this","intersect","bind","_assertThisInitialized","Object","assign","root","rootMargin","threshold","observers","createObserver","getElems","createObservers","observe","_proto","Emitter","document","elems","querySelectorAll","_step","_this2","_loop","el","dataset","cartapusThreshold","cartapusRootMargin","parseFloat","found","find","observer","elements","element","_iterator","_createForOfIteratorHelperLoose","done","_temp","_ref","opt","IntersectionObserver","entries","_step2","_iterator2","entry","value","isIntersecting","target","setAttribute","hasAttribute","unobserve","dispatch","detail","visible","intersection","event","CustomEvent","dispatchEvent","_step3","_iterator3","_step4","_iterator4","_cartapus","_iterator5","_step6","_step5","_iterator6","destroy","_iterator7","reset","init"],"mappings":"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"}