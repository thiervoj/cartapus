{"version":3,"file":"cartapus.modern.mjs","sources":["../node_modules/tiny-emitter/index.js","../src/cartapus.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * @file Cartapus core file, dispatches events based on [data-cartapus] elements' visibility in the viewport.\n * @author Jordan Thiervoz <jordanthiervoz@gmail.com>\n */\n\nimport Emitter from 'tiny-emitter'\n\n/**\n * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n *\n * Usually you will only need to instanciate Cartapus once for your whole App.\n *\n * @param {Object} [options] — User options.\n * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n *\n * @extends Emitter\n * @class\n */\nexport default class Cartapus extends Emitter {\n  /**\n   * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n   *\n   * Usually you will only need to instanciate Cartapus once for your whole App.\n   *\n   * @param {Object} [options] — User options.\n   * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n   * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n   * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n   * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n   *\n   * @extends Emitter\n   * @constructor\n   */\n  constructor(options = {}) {\n    super()\n\n    // Bind callback method.\n    this.intersect = this.intersect.bind(this)\n\n    // Set user options based on default options.\n    const defaults = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n      once: false\n    }\n\n    this.options = Object.assign(defaults, options)\n\n    // Creates the main IntersectionObserver used with the default options.\n    this.observers = [this.createObserver()]\n\n    this.getElems()\n    this.createObservers()\n    this.observe()\n  }\n\n  /**\n   * Gets the [data-cartapus] elements from root element.\n   *\n   * @private\n   * @returns {void}\n   */\n  getElems() {\n    const root = this.options.root ? this.options.root : document\n\n    this.elems = root.querySelectorAll('[data-cartapus]')\n  }\n\n  /**\n   * For each [data-cartapus] element, check its inner data-cartapus parameters\n   * Create new IntersectionObservers accordingly if parameters differs from the main observer.\n   *\n   * @private\n   * @returns {void}\n   */\n  createObservers() {\n    for (const el of this.elems) {\n      // If element has a custom cartapus attribute.\n      if (el.dataset.cartapusThreshold || el.dataset.cartapusRootMargin) {\n        const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n        const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n        // If an observer already exists with the same threshold & the same rootMargin, add element to this observer.\n        const found = this.observers.find((observer) => observer.threshold === threshold && observer.rootMargin === rootMargin)\n\n        if (found) found.elements.push(el)\n        else {\n          // If no observer has the same threshold & rootMargin, create a new one with the new options.\n          this.observers.push(this.createObserver({\n            element: el,\n            options: {\n              threshold,\n              rootMargin\n            }\n          }))\n        }\n      } else this.observers[0].elements.push(el)\n    }\n  }\n\n  createObserver({ options, element } = {}) {\n    const opt = Object.assign(this.options, options)\n\n    return {\n      observer: new IntersectionObserver(this.intersect, opt),\n      threshold: opt.threshold,\n      rootMargin: opt.rootMargin,\n      elements: element ? [element] : []\n    }\n  }\n\n  /**\n   * Callback function triggered by the observers.\n   * Sets the data-cartapus attribute accordingly to the visibility of the elements.\n   * Triggers the custom events.\n   *\n   * @param {array.<IntersectionObserverEntry>} entries — An array of entries that intersected with the root.\n   * @param {IntersectionObserver} observer — The observer that triggered the event.\n   *\n   * @private\n   * @returns {void}\n   */\n  intersect(entries, observer) {\n    for (const entry of entries) {\n      // Set data-cartapus attribute value either to \"visible\" or \"hidden\".\n      if (entry.isIntersecting) {\n        entry.target.setAttribute('data-cartapus', 'visible')\n\n        // Stop observing this element if \"once\" options it true.\n        if (entry.target.hasAttribute('data-cartapus-once')) observer.unobserve(entry.target)\n      } else entry.target.setAttribute('data-cartapus', 'hidden')\n\n      this.dispatch(entry)\n    }\n  }\n\n  /**\n   * Triggers the CustomEvent `cartapusintersect` on the entry's target.\n   * Also triggers an `intersect` event on the class instance.\n   *\n   * @param {IntersectionObserverEntry} entry — The entry that intersected.\n   *\n   * @private\n   * @returns {void}\n   */\n  dispatch(entry) {\n    // Create event with details.\n    const detail = {\n      element: entry.target,\n      visible: entry.isIntersecting,\n      intersection: entry\n    }\n    const event = new CustomEvent('cartapusintersect', { detail })\n\n    // Dispatch element and instance events.\n    entry.target.dispatchEvent(event)\n    this.emit('intersect', detail)\n  }\n\n  /**\n   * Turns on all the observers to watch all of their related targets.\n   *\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  observe() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        el._cartapus = observer\n\n        observer.observer.observe(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off all the observers to stop watching all of their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  unobserve() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.unobserve(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off observers and empty their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  destroy() {\n    this.unobserve()\n\n    for (const observer of this.observers) {\n      observer.elements = []\n    }\n  }\n\n  /**\n   * Resets everything.\n   * Turns off observers and resets their targets.\n   * Then calls `this.init()` to restart everything with new elements to observe.\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  reset() {\n    this.destroy()\n    this.init()\n  }\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","Cartapus","Emitter","constructor","options","super","intersect","bind","Object","assign","root","rootMargin","threshold","observers","createObserver","getElems","createObservers","observe","document","elems","querySelectorAll","el","dataset","cartapusThreshold","cartapusRootMargin","parseFloat","found","find","observer","elements","element","opt","IntersectionObserver","entries","entry","isIntersecting","target","setAttribute","hasAttribute","unobserve","dispatch","detail","visible","intersection","CustomEvent","dispatchEvent","event","_cartapus","destroy","reset","init"],"mappings":"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"}