{"version":3,"file":"cartapus.js","sources":["../node_modules/tiny-emitter/index.js","../src/cartapus.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * @file Cartapus core file, dispatches events based on [data-cartapus] elements' visibility in the viewport.\n * @author Jordan Thiervoz <jordanthiervoz@gmail.com>\n */\n\nimport Emitter from 'tiny-emitter'\n\n/**\n * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n *\n * Usually you will only need to instanciate Cartapus once for your whole App.\n *\n * @param {Object} [options] — User options.\n * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n *\n * @extends Emitter\n * @class\n */\nexport default class Cartapus extends Emitter {\n  /**\n   * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n   *\n   * Usually you will only need to instanciate Cartapus once for your whole App.\n   *\n   * @param {Object} [options] — User options.\n   * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n   * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n   * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n   * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n   *\n   * @extends Emitter\n   * @constructor\n   */\n  constructor(options = {}) {\n    super()\n\n    this.intersect = this.intersect.bind(this)\n    this.mutate = this.mutate.bind(this)\n\n    // Set user options based on default options.\n    const defaults = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n      once: false\n    }\n\n    this.options = Object.assign(defaults, options)\n\n    // Creates the main IntersectionObserver used with the default options.\n    this.observers = [this.createObserver()]\n\n    this.createObservers()\n    this.createMutationObserver()\n    this.observe()\n  }\n\n  /**\n   * For each [data-cartapus] element, check its inner data-cartapus parameters\n   * Create new IntersectionObservers accordingly if parameters differs from the main observer.\n   *\n   * @private\n   * @returns {void}\n   */\n  createObservers() {\n    const root = this.options.root ? this.options.root : document\n    const elems = root.querySelectorAll('[data-cartapus]')\n\n    for (const el of elems) {\n      this.storeNewElement(el)\n    }\n  }\n\n  findObserverForElement(el) {\n    const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n    const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n    // If an observer already exists with the same threshold & the same rootMargin, add element to this observer.\n    const found = this.observers.find((observer) => observer.threshold === threshold && observer.rootMargin === rootMargin)\n\n    return found\n  }\n\n  storeNewElement(el) {\n    if (!el.hasAttribute('data-cartapus')) return false\n\n    // If element has a custom cartapus attribute.\n    if (el.dataset.cartapusThreshold || el.dataset.cartapusRootMargin) {\n      const observer = this.findObserverForElement(el)\n\n      if (observer) {\n        observer.elements.push(el)\n\n        el._cartapus = observer\n      } else {\n        const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n        const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n        // If no observer has the same threshold & rootMargin, create a new one with the new options.\n        this.observers.push(this.createObserver({\n          element: el,\n          options: {\n            threshold,\n            rootMargin\n          }\n        }))\n      }\n    } else {\n      this.observers[0].elements.push(el)\n\n      el._cartapus = this.observers[0]\n    }\n\n    return true\n  }\n\n  createObserver({ options, element } = {}) {\n    const opt = Object.assign(this.options, options)\n    const observer = {\n      observer: new IntersectionObserver(this.intersect, opt),\n      threshold: opt.threshold,\n      rootMargin: opt.rootMargin,\n      elements: element ? [element] : []\n    }\n\n    if (element) element._cartapus = observer\n\n    return observer\n  }\n\n  /**\n   * Creates the MutationObserver.\n   *\n   * @private\n   * @returns {void}\n   */\n  createMutationObserver() {\n    this.mutationObserver = new MutationObserver(this.mutate)\n\n    this.mutationObserver.observe(this.options.root ? this.options.root : document.body, {\n      childList: true,\n      subtree: true\n    })\n  }\n\n  /**\n   * Callback function triggered by the observers.\n   * Sets the data-cartapus attribute accordingly to the visibility of the elements.\n   * Triggers the custom events.\n   *\n   * @param {array.<IntersectionObserverEntry>} entries — An array of entries that intersected with the root.\n   * @param {IntersectionObserver} observer — The observer that triggered the event.\n   *\n   * @private\n   * @returns {void}\n   */\n  intersect(entries, observer) {\n    for (const entry of entries) {\n      // Set data-cartapus attribute value either to \"visible\" or \"hidden\".\n      if (entry.isIntersecting) {\n        entry.target.setAttribute('data-cartapus', 'visible')\n\n        // Stop observing this element if \"once\" options it true.\n        if (entry.target.hasAttribute('data-cartapus-once')) observer.unobserve(entry.target)\n      } else entry.target.setAttribute('data-cartapus', 'hidden')\n\n      this.dispatch(entry)\n    }\n  }\n\n  /**\n   * Triggers the CustomEvent `cartapusintersect` on the entry's target.\n   * Also triggers an `intersect` event on the class instance.\n   *\n   * @param {IntersectionObserverEntry} entry — The entry that intersected.\n   *\n   * @private\n   * @returns {void}\n   */\n  dispatch(entry) {\n    // Create event with details.\n    const detail = {\n      element: entry.target,\n      visible: entry.isIntersecting,\n      intersection: entry\n    }\n    const event = new CustomEvent('cartapusintersect', { detail })\n\n    // Dispatch element and instance events.\n    entry.target.dispatchEvent(event)\n    this.emit('intersect', detail)\n  }\n\n  mutate(records) {\n    for (const record of records) {\n      if (record.type === 'childList') {\n        for (const addedNode of record.addedNodes) {\n          const success = this.storeNewElement(addedNode)\n\n          if (success) addedNode._cartapus.observer.observe(addedNode)\n        }\n\n        for (const removedNode of record.removedNodes) {\n          if (removedNode._cartapus) {\n            const index = removedNode._cartapus.elements.indexOf(removedNode)\n\n            removedNode._cartapus.elements.splice(index, 1)\n            removedNode._cartapus.observer.unobserve(removedNode)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Turns on all the observers to watch all of their related targets.\n   *\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  observe() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.observe(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off all the observers to stop watching all of their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  unobserve() {\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.unobserve(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off observers and empty their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  destroy() {\n    this.unobserve()\n    this.mutationObserver.disconnect()\n\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        delete el._cartapus\n      }\n\n      observer.observer.disconnect()\n      observer.elements = []\n    }\n  }\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","_Emitter","Cartapus","options","_this","intersect","bind","_assertThisInitialized","mutate","Object","assign","root","rootMargin","threshold","observers","createObserver","createObservers","createMutationObserver","observe","_step","elems","document","querySelectorAll","_iterator","done","storeNewElement","value","findObserverForElement","el","dataset","cartapusThreshold","parseFloat","cartapusRootMargin","find","observer","hasAttribute","elements","_cartapus","element","_temp","_ref","opt","mutationObserver","MutationObserver","body","childList","subtree","entries","_step2","_iterator2","entry","isIntersecting","target","setAttribute","unobserve","dispatch","detail","visible","intersection","event","CustomEvent","dispatchEvent","records","record","type","_step4","_iterator4","_createForOfIteratorHelperLoose","addedNodes","addedNode","removedNodes","removedNode","_step5","index","indexOf","splice","_proto","_step6","_iterator6","_step7","_iterator7","_step8","_iterator8","_step9","_iterator9","destroy","disconnect","_step10","_iterator10","_step11","Emitter"],"mappings":"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"}