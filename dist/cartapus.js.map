{"version":3,"file":"cartapus.js","sources":["../node_modules/tiny-emitter/index.js","../src/cartapus.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * @file Cartapus core file, dispatches events based on [data-cartapus] elements' visibility in the viewport.\n * @author Jordan Thiervoz <jordanthiervoz@gmail.com>\n */\n\nimport Emitter from 'tiny-emitter'\n\n/**\n * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n *\n * Usually you will only need to instanciate Cartapus once for your whole App.\n *\n * @param {Object} [options] — User options.\n * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n *\n * @extends Emitter\n * @class\n */\nexport default class Cartapus extends Emitter {\n  /**\n   * Creates a new Cartapus instance, starting to watch every `[data-cartapus]` elements' visibility right away.\n   *\n   * Usually you will only need to instanciate Cartapus once for your whole App.\n   *\n   * @param {Object} [options] — User options.\n   * @param {Element} [options.root=document] — The root DOM element into which [data-cartapus] targets will be watched.\n   * @param {String} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\n   * @param {Number} [options.threshold=0] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\n   * @param {Boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\n   *\n   * @extends Emitter\n   * @constructor\n   */\n  constructor(options = {}) {\n    super()\n\n    this.intersect = this.intersect.bind(this)\n    this.mutate = this.mutate.bind(this)\n\n    // Set user options based on default options.\n    const defaults = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n      once: false\n    }\n\n    this.isObserving = false\n    this.options = Object.assign(defaults, options)\n\n    // Creates the main IntersectionObserver used with the default options.\n    this.observers = [this.createObserver()]\n\n    this.createObservers()\n    this.createMutationObserver()\n    this.observe()\n  }\n\n  /**\n   * For each [data-cartapus] element, check its inner data-cartapus parameters\n   * Create new IntersectionObservers accordingly if parameters differs from the main observer.\n   *\n   * @private\n   * @returns {void}\n   */\n  createObservers() {\n    const root = this.options.root ? this.options.root : document\n    const elems = root.querySelectorAll('[data-cartapus]')\n\n    for (const el of elems) {\n      this.storeNewElement(el)\n    }\n  }\n\n  findObserverForElement(el) {\n    const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n    const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n    // If an observer already exists with the same threshold & the same rootMargin, add element to this observer.\n    const found = this.observers.find((observer) => observer.threshold === threshold && observer.rootMargin === rootMargin)\n\n    return found\n  }\n\n  storeNewElement(el) {\n    if (!el.hasAttribute('data-cartapus')) return false\n\n    // If element has a custom cartapus attribute.\n    if (el.dataset.cartapusThreshold || el.dataset.cartapusRootMargin) {\n      const observer = this.findObserverForElement(el)\n\n      if (observer) {\n        observer.elements.push(el)\n\n        el._cartapus = observer\n      } else {\n        const threshold = el.dataset.cartapusThreshold ? parseFloat(el.dataset.cartapusThreshold) : this.options.threshold\n        const rootMargin = el.dataset.cartapusRootMargin ? el.dataset.cartapusRootMargin : this.options.rootMargin\n\n        // If no observer has the same threshold & rootMargin, create a new one with the new options.\n        this.observers.push(this.createObserver({\n          element: el,\n          options: {\n            threshold,\n            rootMargin\n          }\n        }))\n      }\n    } else {\n      this.observers[0].elements.push(el)\n\n      el._cartapus = this.observers[0]\n    }\n\n    return true\n  }\n\n  createObserver({ options, element } = {}) {\n    const opt = Object.assign(this.options, options)\n    const observer = {\n      observer: new IntersectionObserver(this.intersect, opt),\n      threshold: opt.threshold,\n      rootMargin: opt.rootMargin,\n      elements: element ? [element] : [],\n      once: element && element.hasAttribute('data-cartapus-once') && element.getAttribute('data-cartapus-once') !== 'false' ? true : opt.once\n    }\n\n    if (element) element._cartapus = observer\n\n    return observer\n  }\n\n  /**\n   * Creates the MutationObserver.\n   *\n   * @private\n   * @returns {void}\n   */\n  createMutationObserver() {\n    this.mutationObserver = new MutationObserver(this.mutate)\n\n    this.mutationObserver.observe(this.options.root ? this.options.root : document.body, {\n      childList: true,\n      subtree: true\n    })\n  }\n\n  /**\n   * Callback function triggered by the observers.\n   * Sets the data-cartapus attribute accordingly to the visibility of the elements.\n   * Triggers the custom events.\n   *\n   * @param {array.<IntersectionObserverEntry>} entries — An array of entries that intersected with the root.\n   * @param {IntersectionObserver} observer — The observer that triggered the event.\n   *\n   * @private\n   * @returns {void}\n   */\n  intersect(entries, observer) {\n    for (const entry of entries) {\n      // Set data-cartapus attribute value either to \"visible\" or \"hidden\".\n      if (entry.isIntersecting) {\n        entry.target.setAttribute('data-cartapus', 'visible')\n\n        const once = entry.target.getAttribute('data-cartapus-once')\n\n        if (once === 'false') continue\n\n        // Stop observing this element if \"once\" options it true.\n        if (entry.target._cartapus.once || once !== null) observer.unobserve(entry.target)\n      } else entry.target.setAttribute('data-cartapus', 'hidden')\n\n      this.dispatch(entry)\n    }\n  }\n\n  /**\n   * Triggers the CustomEvent `cartapusintersect` on the entry's target.\n   * Also triggers an `intersect` event on the class instance.\n   *\n   * @param {IntersectionObserverEntry} entry — The entry that intersected.\n   *\n   * @private\n   * @returns {void}\n   */\n  dispatch(entry) {\n    // Create event with details.\n    const detail = {\n      element: entry.target,\n      visible: entry.isIntersecting,\n      intersection: entry\n    }\n    const event = new CustomEvent('cartapusintersect', { detail })\n\n    // Dispatch element and instance events.\n    entry.target.dispatchEvent(event)\n    this.emit('intersect', detail)\n  }\n\n  mutate(records) {\n    for (const record of records) {\n      if (record.type === 'childList') {\n        for (const addedNode of record.addedNodes) {\n          const success = this.storeNewElement(addedNode)\n\n          if (success) addedNode._cartapus.observer.observe(addedNode)\n\n          const inners = addedNode.querySelectorAll('[data-cartapus]')\n\n          for (const el of inners) {\n            const success = this.storeNewElement(el)\n\n            if (success && el._cartapus) el._cartapus.observer.observe(el)\n          }\n        }\n\n        for (const removedNode of record.removedNodes) {\n          if (removedNode._cartapus) {\n            const index = removedNode._cartapus.elements.indexOf(removedNode)\n\n            removedNode._cartapus.elements.splice(index, 1)\n            removedNode._cartapus.observer.unobserve(removedNode)\n          }\n\n          const inners = removedNode.querySelectorAll('[data-cartapus]')\n\n          for (const el of inners) {\n            if (el._cartapus) {\n              const index = el._cartapus.elements.indexOf(el)\n\n              el._cartapus.elements.splice(index, 1)\n              el._cartapus.observer.unobserve(el)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Turns on all the observers to watch all of their related targets.\n   *\n   * This will trigger Cartapus events.\n   *\n   * @public\n   * @returns {void}\n   */\n  observe() {\n    if (this.isObserving) return\n\n    this.isObserving = true\n\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.observe(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off all the observers to stop watching all of their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  unobserve() {\n    if (!this.isObserving) return\n\n    this.isObserving = false\n\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        observer.observer.unobserve(el)\n      }\n    }\n  }\n\n  /**\n   * Turns off observers and empty their related targets.\n   *\n   * @public\n   * @returns {void}\n   */\n  destroy() {\n    this.unobserve()\n    this.mutationObserver.disconnect()\n\n    for (const observer of this.observers) {\n      for (const el of observer.elements) {\n        delete el._cartapus\n      }\n\n      observer.observer.disconnect()\n      observer.elements = []\n    }\n  }\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","_Emitter","options","_this","intersect","bind","_assertThisInitialized","mutate","isObserving","Object","assign","root","rootMargin","threshold","observers","createObserver","createObservers","createMutationObserver","observe","Cartapus","Emitter","_step","elems","document","querySelectorAll","_iterator","done","storeNewElement","value","findObserverForElement","el","dataset","cartapusThreshold","parseFloat","cartapusRootMargin","find","observer","hasAttribute","elements","_cartapus","element","_proto","_temp","_ref","opt","IntersectionObserver","getAttribute","mutationObserver","MutationObserver","body","childList","subtree","entries","entry","_step2","isIntersecting","target","setAttribute","unobserve","dispatch","detail","visible","intersection","event","CustomEvent","dispatchEvent","records","_step3","_iterator3","_createForOfIteratorHelperLoose","record","type","_step4","_iterator4","addedNodes","addedNode","_step6","_iterator6","_step5","removedNodes","_iterator5","removedNode","index","indexOf","splice","_step7","inners","_iterator7","_el","_step8","_iterator8","_step9","_iterator9","_step10","_iterator10","_step11","_iterator11","destroy","disconnect","_step12","_iterator12","_step13","_iterator13"],"mappings":"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"}